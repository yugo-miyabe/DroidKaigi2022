/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.relay.example.reflect.ui.components

import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.tooling.preview.Preview
import com.google.relay.compose.RelayContainer
import com.google.relay.example.reflect.model.*
import com.google.relay.example.reflect.trackersettings.TrackerSettings
import com.google.relay.example.reflect.trackersettings.Type
import com.google.relay.example.reflect.ui.theme.ReflectTheme
import com.google.relay.example.reflect.R

/*
 * A component for configuring a new or existing tracker.
 *
 * TrackerSettingsControl is responsible for providing interaction and state management to the
 * stateless composable [TrackerSettings] generated by Relay.
 */
@Composable
fun TrackerSettingsControl(
    tracker: Tracker,
    modifier: Modifier = Modifier,
    onEmojiFieldTapped: () -> Unit = {},
) {
    val typeMenuOptions = listOf(
        stringResource(R.string.type_boolean),
        stringResource(R.string.type_count),
        stringResource(R.string.type_range),
    ).joinToString(",")

    TrackerSettings(
        modifier = modifier,
        emoji = tracker.emoji,
        type = when (tracker.type) {
            TrackerType.BOOLEAN -> Type.Switch
            TrackerType.COUNT -> Type.Value
            TrackerType.RANGE -> Type.Range
        },
        typeMenuOptions = typeMenuOptions,
        title = tracker.name,
        units = tracker.units,
        rangeMin = tracker.minValue.toString(),
        rangeMax = tracker.maxValue.toString(),
        rangeStep = tracker.step.toString(),
        onEmojiFieldTapped = onEmojiFieldTapped,
        onTitleChanged = { tracker.name = it },
        onTypeChanged = {
            when (it) {
                0.0 -> tracker.type = TrackerType.BOOLEAN
                1.0 -> tracker.type = TrackerType.COUNT
                2.0 -> tracker.type = TrackerType.RANGE
            }
        },
        onUnitsChanged = { tracker.units = it },
        onMinChanged = { tracker.minValue = it.toInt() },
        onMaxChanged = { tracker.maxValue = it.toInt() },
        onStepChanged = { tracker.step = it.toInt() },
    )
}

@Preview(widthDp = 380, heightDp = 176)
@Composable
private fun TrackerSettingsTypeSwitchPreview() {
    val tracker = Tracker("ðŸ˜Š", "Mood", TrackerType.BOOLEAN)
    ReflectTheme(isDarkTheme = true) {
        RelayContainer {
            TrackerSettingsControl(tracker)
        }
    }
}
