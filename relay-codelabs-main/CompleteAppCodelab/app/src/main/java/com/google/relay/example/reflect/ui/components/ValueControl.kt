/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.relay.example.reflect.ui.components

import androidx.compose.foundation.ExperimentalFoundationApi
import androidx.compose.foundation.combinedClickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.google.relay.example.reflect.model.Tracker
import com.google.relay.example.reflect.model.TrackerData
import com.google.relay.example.reflect.model.TrackerType
import com.google.relay.example.reflect.ui.theme.ReflectTheme
import com.google.relay.example.reflect.value.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Job
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlin.time.Duration.Companion.seconds

/*
 * A component for controlling value-type trackers.
 *
 * ValueControl is responsible for providing interaction and state management to the stateless
 * composable [Value] generated by Relay. [onLongClick] provides a way for callers to supplement
 * the control's intrinsic interactions with, for example, a context menu.
 */
@OptIn(ExperimentalFoundationApi::class)
@Composable
fun ValueControl(
    trackerData: TrackerData,
    modifier: Modifier = Modifier,
    onLongClick: (() -> Unit)? = null,
) {
    val editDelaySeconds = 3

    val scope = rememberCoroutineScope()
    var countdown by remember { mutableStateOf<Job?>(null) }
    val isEditing = countdown != null
    val endEditing: suspend CoroutineScope.() -> Unit = {
        delay(editDelaySeconds.seconds)
        countdown = null
    }

    Value(
        modifier
            .clip(shape = RoundedCornerShape(size = 32.dp))
            .combinedClickable(onLongClick = onLongClick) {
                if (!isEditing) {
                    countdown = scope.launch(block = endEditing)
                }
            },
        mode = if (isEditing) Mode.Editing else Mode.Default,
        hasValue = trackerData.value != 0,
        value = trackerData.value.toString() + trackerData.tracker.units,
        emoji = trackerData.tracker.emoji,
        title = trackerData.tracker.name,
        handleIncrement = {
            trackerData.increment()
            countdown?.cancel()
            countdown = scope.launch(block = endEditing)
        },
        handleDecrement = {
            trackerData.decrement()
            countdown?.cancel()
            countdown = scope.launch(block = endEditing)
        },
    )
}

@Preview
@Composable
fun ValueControllerPreview() {
    val data = TrackerData(
        Tracker(
            emoji = "üçï",
            name = "Value",
            type = TrackerType.COUNT
        )
    )
    ReflectTheme {
        Box(
            modifier = Modifier.width(388.dp).height(64.dp)
        ) {
            ValueControl(data)
        }
    }
}