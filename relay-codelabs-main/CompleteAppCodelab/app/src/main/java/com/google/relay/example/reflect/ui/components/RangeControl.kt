/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.relay.example.reflect.ui.components

import androidx.compose.foundation.ExperimentalFoundationApi
import androidx.compose.foundation.combinedClickable
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.unit.dp
import com.google.relay.example.reflect.model.TrackerData
import com.google.relay.example.reflect.range.Range
import com.google.relay.example.reflect.range.Spread

/*
 * A component for controlling range-type trackers.
 *
 * RangeControl is responsible for providing interaction and state management to the stateless
 * composable [Range] generated by Relay. [onLongClick] provides a way for callers to supplement
 * the control's intrinsic interactions with, for example, a context menu.
 */
@OptIn(ExperimentalFoundationApi::class)
@Composable
fun RangeControl(
    trackerData: TrackerData,
    modifier: Modifier = Modifier,
    onLongClick: (() -> Unit)? = null,
) {
    val spreadValues = Spread.values()
    // The following assumes the tracker values are integers. We also want only the min value to map
    // to an empty range value and only the max value to map to the maximum range value.
    val min = trackerData.tracker.minValue
    val max = trackerData.tracker.maxValue
    val trackerSpan = max - min - 1
    val mappedValue =
        when (val value = trackerData.value) {
            min -> 0
            max -> spreadValues.size - 1
            else -> 1 + ((value - min - 1) * (spreadValues.size - 2)) / trackerSpan
        }
    val spreadValue = spreadValues[mappedValue]

    Range(
        modifier
            .clip(shape = RoundedCornerShape(size = 32.dp))
            .combinedClickable(onLongClick = onLongClick) {
                if (trackerData.value >= trackerData.tracker.maxValue) {
                    trackerData.value = trackerData.tracker.minValue
                } else {
                    trackerData.value += 1
                }
            },
        spread = spreadValue,
        emoji = trackerData.tracker.emoji,
        title = trackerData.tracker.name,
        value = trackerData.value.toString(),
    )
}